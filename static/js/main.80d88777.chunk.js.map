{"version":3,"sources":["components/friends.js","components/Card.js","components/FriendsList.js","components/SearchDevelopers.js","components/ErrorBaundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["friends","id","name","username","position","email","Card","className","src","alt","FriendsList","map","user","i","key","SearchDevelopers","onSearchChange","type","placeholder","onChange","ErrorBaundry","props","state","hasError","error","info","this","setState","children","Component","App","event","searchField","target","value","filterDeveloper","filter","friend","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80d88777.chunk.js","sourcesContent":["export const friends = [\n    {\n        id:1,\n        name:\"Mats\",\n        username:\"mats\",\n        position:\"Java developer\",\n        email:\"mats@gmail.com\"\n    },\n\n    {\n        id:2,\n        name:\"Sargon\",\n        username:\"sargon\",\n        position:\"Java developer\",\n        email:\"sargon@gmail.com\"\n    },\n    \n    {\n        id:3,\n        name:\"Marios\",\n        username:\"marios\",\n        position:\"Java developer\",\n        email:\"marios@gmail.com\"\n    },\n\n    {\n        id:4,\n        name:\"Roland\",\n        username:\"roland\",\n        position:\"Java developer\",\n        email:\"roland@gmail.com\"\n    },\n\n    {\n        id:5,\n        name:\"Eva\",\n        username:\"eva\",\n        position:\"Java developer\",\n        email:\"eva@gmail.com\"\n    },\n\n    {\n        id:6,\n        name:\"Mussa\",\n        username:\"mmussa\",\n        position:\"Java developer\",\n        email:\"mussa@gmail.com\"\n    },\n\n    {\n        id:7,\n        name:\"Sahar\",\n        username:\"sahar\",\n        position:\"Java developer\",\n        email:\"sahar@gmail.com\"\n    },\n\n    {\n        id:8,\n        name:\"Medhanie\",\n        username:\"meda\",\n        position:\"Java developer\",\n        email:\"medasele273@gmail.com\"\n    },\n\n    {\n        id:9,\n        name:\"Siawash\",\n        username:\"siawash\",\n        position:\"Java developer\",\n        email:\"siawash@gmail.com\"\n    },\n\n    {\n        id:10,\n        name:\"Biniam\",\n        username:\"biniam\",\n        position:\"Java developer\",\n        email:\"biniam@gmail.com\"\n    },\n\n    {\n        id:11,\n        name:\"Meskerem\",\n        username:\"meskerem\",\n        position:\"Java developer\",\n        email:\"meskerem@gmail.com\"\n    },\n    \n    {\n        id:12,\n        name:\"Sara\",\n        username:\"sara\",\n        position:\"Fornt-end developer\",\n        email:\"sara@gmail.com\"\n    },\n\n    {\n        id:13,\n        name:\"Solomon\",\n        username:\"sele\",\n        position:\"Fullstack developer\",\n        email:\"sele@gmail.com\"\n    },\n\n    {\n        id:14,\n        name:\"Nahom\",\n        username:\"nahom\",\n        position:\"Game App developer\",\n        email:\"namhom@gmail.com\"\n    },\n  \n    {\n        id:15,\n        name:\"Javad\",\n        username:\"javad\",\n        position:\"Food App developer\",\n        email:\"javad@gmail.com\"\n    },\n \n    {\n        id:17,\n        name:\"Rabison\",\n        username:\"rabi\",\n        position:\"C# developer\",\n        email:\"rabi@gmail.com\"\n    },\n\n    {\n        id:18,\n        name:\"Chaie\",\n        username:\"chaie\",\n        position:\"Web app developer\",\n        email:\"chaie@gmail.com\"\n    },\n\n    {\n        id:19,\n        name:\"Selam\",\n        username:\"selam\",\n        position:\" Fullstack developer\",\n        email:\"selam@gmail.com\"\n    },\n\n    {\n        id:20,\n        name:\"Shyla\",\n        username:\"shyla\",\n        position:\"Fullstack developer\",\n        email:\"shyla@gmail.com\"\n    }\n\n]","import React from \"react\";\n\n\nconst Card = ({ id,username, name, position, email }) => {\n  return (\n    <div className=\"bg-light-purple br4 ba bw2 b-dark pa2 ma3 w5 grow dib shadow-5\">\n\n      <img src={`https://robohash.org/${id}?size=100x100`} alt=\"robotes\" />\n      <div>\n        <h3>{name}</h3>\n        <p>{username}</p>\n        <h4>{position}</h4>\n        <p>{email}</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst FriendsList = ({ friends }) => {\n\n    return (\n        <div>\n            \n            {\n                friends.map((user, i) => {\n                    return (\n                        <Card \n                        key={i} \n                        id={friends[i].id} \n                        name={friends[i].name} \n                        username={friends[i].username}\n                        position={friends[i].position}\n                        email={friends[i].email} \n                        />\n                    )\n                })\n            }\n        </div>\n    )\n\n}\n\nexport default FriendsList;","import React from 'react';\n\nconst SearchDevelopers =({onSearchChange})=> {\n  \n        return (\n            <div className=\"pa2\">\n                <input className=\"pa3 ma2 ba bw1 b--dark-red bg-light-green br3\"\n                    type=\"search\"\n                    placeholder=\"Search Developer\"\n                    onChange={onSearchChange}\n                    \n                />\n            </div>\n        )\n    }\n   \n\nexport default SearchDevelopers;","import React, {Component} from 'react';\n\nclass ErrorBaundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError:false\n        }\n    }\n\n    componentDidCatch(error,info){\n      this.setState({hasError:true});  \n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>OOOOpps, there is Error</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBaundry;","import React from 'react';\n//import Card from './Card';\nimport './App.css';\nimport { friends } from '../components/friends';\nimport FriendsList from '../components/FriendsList';\nimport SearchDevelopers from '../components/SearchDevelopers';\n//import { StickyContainer, Sticky } from 'react-sticky';\n//import Scroll from './Scroll';\nimport ErrorBaundry from '../components/ErrorBaundry';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friends: friends,\n      searchField: \"\"\n    }\n  }\n  /** If I want to get users from API  i can use this */\n  /* componentDidMount(){\n     fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response =>response.json())\n     .then(user=>{this.setState({friends:user})});\n   }*/\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  render() {\n    const { friends, searchField } = this.state;\n    const filterDeveloper = friends.filter(friend => {\n      return friend.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    if (friends.length === 0) {\n      return <h1>LODDING......</h1>\n    } else {\n      return (\n        <div className=\"tc\">\n          <div className=\"sticky\">\n            <img className=\"pa2 ma2\" src=\"https://fontmeme.com/permalink/191124/7a35abdbc690f107238583c6bd02d75c.png\" alt=\"Header\" />\n            <SearchDevelopers onSearchChange={this.onSearchChange} />\n          </div>\n          <ErrorBaundry>\n              <FriendsList friends={filterDeveloper} />\n          </ErrorBaundry>\n          \n        </div>\n      );\n    }\n\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './containers/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}